include:

#include <s3eTypes.h>

functions:

/**
 * Initialise the GameAnalytics wrapper. It is recommended that you call
 * this method from the entry activity of your application's onCreate()
 * method.
 * 
 * @param secretKey
 *            secret key supplied when you registered at GameAnalytics
 * @param gameKey
 *            game key supplied when you registered at GameAnalytics
 * @param build
 *            optional - leave out to use 'android:versionName' from
 *            manifest file by default
 *
 * @Supported Platforms: android , ios
 * 
 */
void lsGameAnalyticsInitialise(const char * secretKey, const char * gameKey, const char * build S3E_DEFAULT(NULL)) run_on_os_thread 
     

/**
 * Checks whether Game Analytics has been initialised.
 * 
 * @return true if initialised, otherwise false
 *
 * @Supported Platforms: android , ios
 * 
 */
bool lsGameAnalyticsIsInitialised() false run_on_os_thread

/**
 * Checks whether a Game Analytics session has been started.
 * 
 * @return true if session started, otherwise false
 *
 * @Supported Platforms: android , ios
 * 
 */
bool lsGameAnalyticsIsSessionStarted() false run_on_os_thread

/**
 * Call this method in every activity's onResume() method to ensure correct
 * session logging.
 * 
 * @param context
 *            the calling activity
 * 
 * @Supported Platforms: android , ios
 * 
 */
void lsGameAnalyticsStartSession() run_on_os_thread

/**
 * Call this method in every activity's onPause() method to ensure correct
 * session logging.
 * 
 * @Supported Platforms: android , ios
 * 
 */
void lsGameAnalyticsStopSession() run_on_os_thread

/**
 * Add a new design event to the event stack. This will be sent off in a
 * batched array after the time interval set using setTimeInterval().
 * 
 * @Supported Platforms: android , ios
 * 
 * @param eventId
 *            use colons to denote subtypes, e.g. 'PickedUpAmmo:Shotgun'
 * @param value
 *            numeric value associated with event e.g. number of shells
 * @param area
 *            area/level associated with the event
 * @param x
 *            position on x-axis
 * @param y
 *            position on y-axis
 * @param z
 *            position on z-axis
 */
void lsGameAnalyticsNewDesignEvent(const char * eventId, float value, const char * area, float x, float y, float z) run_on_os_thread

/**
 * Add a new quality event to the event stack. This will be sent off in a
 * batched array after the time interval set using setTimeInterval().
 * 
 * @Supported Platforms: android , ios
 * 
 * @param eventId
 *            use colons to denote subtypes, e.g.
 *            'Exception:NullPointerException'
 * @param message
 *            message associated with event e.g. the stack trace
 * @param area
 *            area/level associated with the event
 * @param x
 *            position on x-axis
 * @param y
 *            position on y-axis
 * @param z
 *            position on z-axis
 * 
 * @deprecated use {@link newErrorEvent()} instead.
 */
void lsGameAnalyticsNewQualityEvent(const char * eventId, const char * message, const char * area S3E_DEFAULT(0), float x S3E_DEFAULT(0.0), float y S3E_DEFAULT(0.0), float z S3E_DEFAULT(0.0)) run_on_os_thread

/**
 * Add a new error event to the event stack. This will be sent off in a
 * batched array after the time interval set using setTimeInterval().
 * 
 * @Supported Platforms: android 
 * 
 * @param message
 *            message associated with the error e.g. the stack trace
 * @param severity 
 *            use CRITICAL, ERROR,  WARNING, INFO or DEBUG.
 * @param area
 *            area/level associated with the event
 * @param x
 *            position on x-axis
 * @param y
 *            position on y-axis
 * @param z
 *            position on z-axis
 */
void lsGameAnalyticsNewErrorEvent(const char * message, const char * severity, const char * area S3E_DEFAULT(0), float x S3E_DEFAULT(0.0), float y S3E_DEFAULT(0.0), float z S3E_DEFAULT(0.0)) run_on_os_thread

/**
 * Add a new user event to the event stack. This will be sent off in a
 * batched array after the time interval set using setTimeInterval(). The
 * current activity will be used as the 'area' value for the event.
 *
 * @Supported Platforms: android 
 * 
 * @param eventId
 *            use colons to denote subtypes
 * @param gender
 *            user gender, use 'm' for male, 'f' for female
 * @param birthYear
 *            four digit birth year
 * @param friendCount
 *            number of friends
 * @param area
 *            area/level associated with the event
 * @param x
 *            position on x-axis
 * @param y
 *            position on y-axis
 * @param z
 *            position on z-axis
 * 
 * @deprecated use {@link setUserInfo()} instead.
 */
void lsGameAnalyticsNewUserEvent(const char * eventId, const char * gender,int birthYear, int friendCount, const char * area S3E_DEFAULT(0), float x S3E_DEFAULT(0.0), float y S3E_DEFAULT(0.0), float z S3E_DEFAULT(0.0)) run_on_os_thread

/**
 * Send user info to the Game Analytics server. All parameters are optional,
 * pass in 'null' if you do not have the data.
 * 
 * @Supported Platforms: android , ios
 *
 * @param gender
 *            user gender, use 'm' for male, 'f' for female
 * @param birthYear
 *            four digit birth year
 * @param friendCount
 *            number of friends
 */
void lsGameAnalyticsSetUserInfo(const char * gender, int birthYear, int friendCount) run_on_os_thread

/**
 * Manually send referral info to the Game Analytics server. All parameters
 * are optional, use 'null' if you do not have the data.
 * 
 * For automatic referrals, extend ReferralReceiver class set up as
 * broadcast receiver in Android Manifest.
 * 
 * @Supported Platforms: android 
 * 
 * @param installPublisher
 *            e.g. FB, Chartboost, Google Adwords, Organic
 * @param installSite
 *            e.g. FB.com, FBApp, AppId
 * @param installCampaign
 *            e.g. Launch, EasterBoost, ChrismasSpecial
 * @param installAd
 *            e.g. Add#239823, KnutsShinyAd
 * @param installKeyword
 *            e.g. rts mobile game
 */
void lsGameAnalysticsSetReferralInfo(const char * installPublisher, const char * installSite, const char * installCampaign, const char * installAdgroup, const char * installAd, const char * installKeyword) run_on_os_thread

/**
 * Add a new business event to the event stack. This will be sent off in a
 * batched array after the time interval set using setTimeInterval().
 *
 * @Supported Platforms: android  , ios
 * 
 * @param eventId
 *            use colons to denote subtypes, e.g. 'PurchaseWeapon:Shotgun'
 * @param currency
 *            3 digit code for currency e.g. 'USD'
 * @param amount
 *            value of transaction
 * @param area
 *            area/level associated with the event
 * @param x
 *            position on x-axis
 * @param y
 *            position on y-axis
 * @param z
 *            position on z-axis
 */
void lsGameAnalysticsNewBusinessEvent(const char * eventId, const char *  currency, int amount, const char * area S3E_DEFAULT(0), float x S3E_DEFAULT(0.0), float y S3E_DEFAULT(0.0), float z S3E_DEFAULT(0.0)) run_on_os_thread
                
/**
 * Set the amount of time, in milliseconds, between each batch of events
 * being sent. The default is 20 seconds.
 *
 * @Supported Platforms: android
 * 
 * @param millis
 *            interval in milliseconds
 */
void lsGameAnalysticsSetSendEventsInterval(int millis) run_on_os_thread

/**
 * If a network is not available GameAnalytics will poll the connection and
 * send the events once it is restored. Set the amount of time, in
 * milliseconds, between polls. The default is 60 seconds.
 *
 * @Supported Platforms: android
 * 
 * @param millis
 *            interval in milliseconds
 */
void lsGameAnalysticsSetNetworkPollInterval(int millis) run_on_os_thread

/**
 * Set the amount of time, in milliseconds, for a session to timeout so that
 * a new one is started when the application is restarted. being sent. The
 * default is 20 seconds.
 * 
 * @Supported Platforms: android
 *
 * @param millis
 *            interval in milliseconds
 */
void lsGameAnalysticsSetSessionTimeOut(int millis) run_on_os_thread

/**
 * Place somewhere inside your draw loop to log FPS. If you are using openGL
 * then that will be inside your Renderer class' onDrawFrame() method. You
 * must then call stopLoggingFPS() at some point to collate the data and
 * send it to GameAnalytics. You can either do this intermittently e.g.
 * every 1000 frames, or over an entire gameplay session e.g. in the
 * activity's onPause() method. Either way, the average FPS will be logged.
 *
 * @Supported Platforms: android
 */
void lsGameAnalysticsLogFPS() run_on_os_thread

/**
 * Call this method when you want to collate you FPS and send it to the
 * server. You can either do this intermittently e.g. every 1000 frames, or
 * over an entire gameplay session e.g. in the activity's onPause() method.
 * Either way, the average FPS will be logged. The parameters are optional.
 * If left out, the name of the current activity will be logged as the area
 * parameter.
 * 
 * @Supported Platforms: android
 *
 * @param area
 *            (optional - use to log the FPS in a specific level/area)
 * @param x
 *            (optional)
 * @param y
 *            (optional)
 * @param z
 *            (optional)
 */
void lsGameAnalysticsStopLoggingFPS(const char * area S3E_DEFAULT(NULL), float x S3E_DEFAULT(0.0), float y S3E_DEFAULT(0.0), float z S3E_DEFAULT(0.0)) run_on_os_thread


/**
 * Set the critical FPS limit. If the average FPS over a period is under
 * this value then a "FPSCritical" design event will be logged. The default
 * is 20 frames per second.
 * 
 * @param criticalFPS
 *            in frames per second
 * @Supported Platforms: android
 */
void lsGameAnalysticsSetCriticalFPSLimit(int criticalFPS) run_on_os_thread

/**
 * Set the minimum time period for an average FPS to be logged. This stops
 * spurious results coming from very short time periods. Default is 5
 * seconds.
 * 
 * @param minimumTimePeriod
 *            in milliseconds
 * @Supported Platforms: android
 */
void lsGameAnalysticsSetMinimumFPSTimePeriod(int minimumTimePeriod) run_on_os_thread

/**
 * Call this method at the same time as initialise() to automatically log
 * any unhandled exceptions occuring on your main/GUI thread. You need to
 * call this method from ever thread that you wish to log unhandled
 * exceptions on e.g. update loop, draw loop etc.
 * @Supported Platforms: android
 */
void lsGameAnalysticsLogUnhandledExceptions() run_on_os_thread

/**
 * Set a custom userId string to be attached to all subsequent events. By
 * default, the user ID is generated from the unique Android device ID.
 * 
 * @param userId
 *            Custom unique user ID
 * @Supported Platforms: android , ios
 */
void lsGameAnalysticsSetUserId(const char * userId) run_on_os_thread

/**
 * Set debug log level. Use GameAnalytics.VERBOSE while you are developing
 * to see when every event is created and batched to server. Set to
 * GameAnalytics.RELEASE (default) when you release your application so only
 * warning and event logs are made.
 * 
 * @param level
 *            Set to either GameAnalytics.VERBOSE or GameAnalytics.RELEASE
 * @Supported Platforms: android
 */
void lsGameAnalysticsSetDebugLogLevel(int level)

/**
 * Enable/disable local caching. By default (true) events are cached locally
 * so that even if an internet connection is not available, they will be
 * sent to the GA server when it is restored. If disabled (false) events
 * will be discarded if a connection is unavailable.
 * 
 * @param value
 *            true = enabled; false = disabled
 * @Supported Platforms: android
 */
void lsGameAnalysticsSetLocalCaching(bool value) run_on_os_thread

/**
 * Enable/disable automatic batching. By default (true) events are sent off
 * to the GA server after a time interval set using setSendEventsInterval().
 * If disabled (false) then you will need to use manualBatch() to send the
 * events to the serv er.
 * 
 * @param value
 *            true = enabled; false = disabled
 * @Supported Platforms: android
 */
void lsGameAnalysticsSetAutoBatch(bool value) run_on_os_thread

/**
 * Set maximum number of events that are stored locally. Additional events
 * will be discarded. Set to 0 for unlimited (default).
 * 
 * @param max
 *            maximum number of events that can be stored
 * @Supported Platforms: android
 */
void lsGameAnalysticsSetMaximumEventStorage(int max) run_on_os_thread

/**
 * Create a special BatchThread just to send events. This event will not
 * wait for the sendEventInterval nor will it poll the internet connection.
 * If there is no connection it will simply return.
 * @Supported Platforms: android 
 */
void lsGameAnalysticsManualBatch() run_on_os_thread

/**
 * The userId that the SDK uses to track each individual user on the server.
 * 
 * param destination
 *          where to store the data 
 * @return the user id or null if the SDK is not initialised.
 * @Supported Platforms: android , ios
 */
void lsGameAnalysticsGetUserId(char * destination) NULL run_on_os_thread

/**
 * Manually clears the database, will result in loss of analytics data if
 * used in production.
 * @Supported Platforms: android 
 */
void lsGameAnalysticsClearDatabase() run_on_os_thread

append:

